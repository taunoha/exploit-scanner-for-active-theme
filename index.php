<?php
/**
 *  Plugin Name: Exploit Scanner for Active Theme
 *  Plugin URI: http://prixal.eu/
 *  Description: Search the theme files for signs that may indicate that it has fallen victim to malicious hackers.
 *  Version: 1.0.0
 *  Author: Prixal LLC
 *  Author URI: http://prixal.eu/
 *  License: GPL2+
 *  Text Domain: px_theme_scanner
 *
 *  Copyright 2016  Prixal LLC  (email: info@prixal.eu)
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, version 2, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
**/

defined('ABSPATH') or die('No script kiddies please!');

class px_Exploit_Scanner
{
    var $theme_hash = '';

    public function __construct()
    {
        add_action('admin_menu', array($this, 'addOptionPage'));
        add_action('admin_enqueue_scripts', array($this, 'scripts'));
        add_action('admin_enqueue_scripts', array($this, 'styles'));
        add_action('wp_ajax_px_theme_scanner_hashes', array($this, 'ajaxNewHashes'));
        add_action('wp_ajax_px_theme_scanner_check', array($this, 'ajaxCheckHashes'));
        add_action('wp_ajax_px_theme_scanner_upload', array($this, 'ajaxFileUpload'));
        add_action('plugins_loaded', array($this, 'downloadAsJSON') );

        $theme = wp_get_theme();
        $this->theme_hash = substr(md5($theme->get('Name')), 8);
    }

    public function addOptionPage()
    {
        add_management_page('Theme Scanner', esc_attr__('Theme Scanner', 'px_theme_scanner'), 'manage_options', 'px_theme_scanner', array($this, 'page'));
    }

    public function scripts()
    {
        wp_enqueue_script('px-theme-scanner', plugins_url('/js/custom.js' , __FILE__ ), array('wp-util'), null, false);
        wp_localize_script('px-theme-scanner', 'pxThemeScannerVars',
            array(
                'nonce' => wp_create_nonce('px_theme_scanner')
            )
        );
    }

    public function styles()
    {
        wp_enqueue_style('px-theme-scanner', plugins_url('/css/styles.css' , __FILE__ ));
    }

    public function page()
    {

        // Hashes
        //
        $data = get_option('_px_theme_scanner_hashes_' . $this->theme_hash);
        $last_modified = sprintf('<span color="red">%s</span>', __('Never', 'px-theme-scanner'));
        $has_hashes = false;
        $theme = wp_get_theme();

        if( isset($data['last_modified']) ) {
            $last_modified = date(get_option('date_format') . ' ' . get_option('time_format'), $data['last_modified']);
            $has_hashes = true;
        }

        echo '<div class="wrap">';
        printf('<h1>%s</h1>', __('Exploit Scanner for Active Theme', 'px_theme_scanner'));
        printf('<p>%s</p>', __('This plugin searches through your active theme for signs that may indicate that your theme has been compromised by hackers. It does NOT remove anything!', 'px-theme-scanner'));

        echo '<div class="card">';
        printf('<h2>%s</h2>', __('Hashes', 'px_theme_scanner'));
        printf('<p>Current theme: <b>%s</b></p>', $theme->get('Name'));
        printf('<p>%s: <b id="px-theme-scanner-hashes">%s</b></p>', __('Hashes generated', 'px-theme-scanner'), $last_modified);
        echo ($has_hashes) ? '<p class="card-tools has-hashes">' : '<p class="card-tools">';
        echo '<button type="button" class="button button-secondary" data-action="pxNewHashes" type="button">Generate hashes</button> &nbsp;&nbsp; <a href="' . esc_url( add_query_arg( array('download' => 'json') ) ) . '" class="download">Download as JSON</a></p>';
        echo '</div>';

        // Check Hashes
        //
        //
        $data = get_option('_px_theme_scanner_scan_' . $this->theme_hash);
        $last_modified = sprintf('<b>%s</b>', __('Never', 'px-theme-scanner'));

        if( isset($data['last_modified']) ) {
            $last_modified = date(get_option('date_format') . ' ' . get_option('time_format'), $data['last_modified']);
        }

        printf('<h2>%s</h2>', __('Results', 'px_theme_scanner'));
        printf('<p>%s: <b id="px-theme-scanner-scan">%s</b></p>', __('Last scan', 'px-theme-scanner'), $last_modified);
        echo '<div id="px-theme-scanner-results"></div>';
        printf('<p><button type="button" class="button-primary" data-action="pxScanHashes">%s</button> &nbsp;&nbsp; or &nbsp;&nbsp; <a href="#" data-action="pxUploadJSON">Upload JSON</a></p>', __('Run the Scan', 'px-theme-scanner'));
        echo '</div>';
        echo '<form action="#" method="post" enctype="multipart/form-data" class="screen-reader-text" aria-hidden="true"><input name="hashes_files" id="hashes_files" accept="application/json" type="file" /></form>';
        echo '<script type="text/html" id="tmpl-px-theme-results">';
        echo '<table class="wp-list-table widefat striped">';
        printf('<thead><tr><th>%s</th><th>%s</th><th>%s</th></tr></thead>', __('File', 'px-theme-scanner'), __('Modified'), __('Status'));
        echo '<tbody>';
        echo '</tbody>';
        echo '</table>';
        echo '</script>';
    }

    public function ajaxNewHashes()
    {
        check_ajax_referer('px_theme_scanner', 'nonce');

        $hashes = $this->generateHashes();
        $last_modified = time();

        $data = array(
            'last_modified' => $last_modified,
            'hashes' => $hashes
        );
        update_option('_px_theme_scanner_hashes_' . $this->theme_hash, $data, false);

        wp_send_json_success( array('last_modified' => date(get_option('date_format') . ' ' . get_option('time_format'))) );
    }

    public function ajaxCheckHashes()
    {
        check_ajax_referer('px_theme_scanner', 'nonce');

        $hashes = $this->checkHashes();

        if( is_wp_error($hashes) ) {
            wp_send_json_error($hashes->get_error_message());
        }
        update_option('_px_theme_scanner_scan_' . $this->theme_hash, array('last_modified' => time()), false);

        wp_send_json_success($hashes);
    }

    public function ajaxFileUpload()
    {
        check_ajax_referer('px_theme_scanner', 'nonce');
        $hashes = json_decode(stripslashes_deep($_POST['hashes']), true);
        $error = json_last_error();

        if( $error !== JSON_ERROR_NONE ) {
            wp_send_json_error(__('Syntax error, malformed JSON', 'px-theme-scanner'));
        }

        if( !isset($hashes['hashes']) ) {
            wp_send_json_error(__('Hashes not found. Please download new Hashes JSON above.', 'px-theme-scanner'));
        }

        $theme_directory = explode('/wp-content/', get_template_directory());
        $theme_folder_name = basename(get_template_directory());
        $key = key($hashes['hashes']);

        if( strpos($key, $theme_folder_name) === false ) {
            wp_send_json_error(__('Are you sure that you have uploaded current theme hashes?', 'px-theme-scanner'));
        }

        if( substr($key, 0, 11) === 'wp-content/' )
        {
            $new_hashes = array();

            foreach( $hashes['hashes'] as $file => $hash ) {
                $path = $theme_directory[0] . '/' . $file;
                $new_hashes[$path] = $hash;
            }

            $hashes['hashes']= $new_hashes;
        }

        $check = $this->checkHashes($hashes);
        wp_send_json_success($check);
    }

    public function generateHashes()
    {
        $hashes = array();
        $theme_directory = get_stylesheet_directory();
        $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($theme_directory), RecursiveIteratorIterator::SELF_FIRST);

        foreach($objects as $name => $object)
        {
            if( is_file($name) ) {
                $hashes[$name] = md5_file($name);
            }
        }

        return $hashes;
    }

    public function checkHashes( $hashes = array())
    {
        $vulnerable_files = array();

        if( empty($hashes) )
        {
            $hashes = get_option('_px_theme_scanner_hashes_' . $this->theme_hash);

            if( !isset($hashes['hashes']) ) {
                return new WP_Error( 'hashes-missing', __('Generate hashes first', 'px-theme-scanner') );
            }
        }

        $files = array();
        $theme_directory = get_stylesheet_directory();
        $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($theme_directory), RecursiveIteratorIterator::SELF_FIRST);

        foreach($objects as $name => $object)
        {
            if( is_file($name) )
            {
                if( isset($hashes['hashes'][$name]) )
                {
                    $new_hash = md5_file($name);
                    $old_hash = $hashes['hashes'][$name];

                    if( $new_hash !== $old_hash ) {
                        $vulnerable_files[] = array(
                            'file' => $name,
                            'status' => esc_attr__('Modified', 'px-theme-scanner'),
                            'last_modified' => date(get_option('date_format') . ' ' . get_option('time_format'), filemtime($name))
                        );
                    }

                } else {

                    $vulnerable_files[] = array(
                        'file' => $name,
                        'status' => esc_attr__('Added', 'px-theme-scanner'),
                        'last_modified' => date(get_option('date_format') . ' ' . get_option('time_format'), filemtime($name))
                    );

                }

                $files[$name]= $new_hash;

            }
        }

        foreach( array_diff_key($hashes['hashes'], $files) as $file => $hash )
        {
            $vulnerable_files[] = array(
                'file' => $file,
                'status' => esc_attr__('Deleted', 'px-theme-scanner'),
                'last_modified' => '&nbsp;'
            );
        }

        return $vulnerable_files;
    }

    public function downloadAsJSON()
    {
        if( isset($_GET['download']) && 'json' == $_GET['download'] )
        {
            if( ! current_user_can('manage_options') ) {
                wp_die(__('You do not have sufficient permissions to access this page.', 'px-theme-scanner'));
            }

            $theme = wp_get_theme();
            $filename = sprintf('hashes_%s_%d.json', sanitize_title($theme->get('Name')), time());
            $hashes = get_option('_px_theme_scanner_hashes_' . $this->theme_hash, false);

            if( $hashes ) {
                header('Content-disposition: attachment; filename=' . $filename);
                header('Content-type: application/json', true, 200);
                header("Pragma: no-cache");
                header("Expires: 0");

                echo json_encode($hashes, JSON_PRETTY_PRINT);

                exit();
            }
        }
    }
}

new px_Exploit_Scanner();
